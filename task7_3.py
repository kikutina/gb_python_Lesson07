#3)	Реализовать программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
# соответствующий количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
#Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух клеток.
#Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
#Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется
# как произведение количества ячеек этих двух клеток.
#Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное
# деление количества ячеек этих двух клеток.
#В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
#Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
#Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
#Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
from math import ceil
class Cell:
    def __init__(self, quantity):
        self.quantity = int(quantity)

    def __str__(self):
        return f'Результат операции {self.quantity}'

    def __add__(self, other):
        return Cell(self.quantity + other.quantity)

    def __sub__(self, other):
        pass
        if int(self.quantity-other.quantity) > 0:
            return f'Результат операции {(self.quantity - other.quantity)}'
        else:
            return 'Отрицательное число, вычитание не возможно!!'

    def __mul__(self, other):
        return Cell(int(self.quantity*other.quantity))

    def __truediv__(self, other):
        return Cell(ceil(self.quantity/other.quantity))

    def  make_order(self, c_in_row):
        row = ''
        for i in range(int(self.quantity / c_in_row)):
            row += f'{"*" * c_in_row}\\n'
        row += f'{"*" * (self.quantity % c_in_row)}'
        return row

cell1= Cell(22)
cell2 = Cell(6)
print(Cell.__str__(cell1))
print(Cell.__str__(cell2))
print(Cell.__add__(cell1, cell2))
print(Cell.__mul__(cell1, cell2))
print(Cell.__sub__(cell1, cell2))
print(Cell.__truediv__(cell1,cell2))
print(cell2.make_order(4))
print(cell1.make_order(7))